#
# This docker-compose file starts and runs:
# * A redis server
# * A 1-node kafka cluster
# * A 1-zookeeper ensemble
# * Kafka Connect with Redis Source
# * 3 Java Applications- Trucking-Simulation, Banking-Simulation, and STEDI
# * A Spark master
# * A Spark worker

version: '3.7'

services:
  redis:
    image: redis:6.0.6
    ports:
      - "6379:6379"
    container_name: "redis"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
    container_name: "zookeeper"


  kafka:
    image: confluentinc/cp-kafka:5.5.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    depends_on:
      - "zookeeper"
    container_name: "kafka"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.2
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:19092"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: "1"
    depends_on:
      - "kafka0"
    container_name: "schema-registry"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.2.2
    ports:
    - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:19092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082/"
      KAFKA_REST_HOST_NAME: "rest-proxy"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/"
    depends_on:
    - "kafka"
    - "schema-registry"
    container_name: "rest-proxy"


  banking-simulation:
    image: gcr.io/simulation-images/banking-simulation
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      KAFKA_BROKER: kafka:19092
    depends_on:
      - "kafka"
      - "redis"
    container_name: "banking-simulation"


  trucking-simulation:
    image: gcr.io/simulation-images/trucking-simulation
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      KAFKA_BROKER: kafka:19092
    depends_on:
      - "kafka"
      - "redis"
    container_name: "trucking-simulation"


  stedi:
    image: gcr.io/simulation-images/stedi
    ports: 
    - "4567:4567"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      KAFKA_BROKER: kafka:19092
      KAFKA_RISK_TOPIC: 'customer-risk'
    depends_on:
      - "kafka"
      - "redis"
    container_name: "stedi"


  connect:
    image: gcr.io/simulation-images/kafka-connect-redis-source
    ports:
    - "8083:8083"
    - "5005:5005"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:19092"
      CONNECT_GROUP_ID: "connect"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_PLUGIN_PATH: "/usr/share/java"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.converters.ByteArrayConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offset"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_DEBUG: "y"
      DEBUG_SUSPEND_FLAG: "y"
      CLASSPATH: "/usr/share/java/kafka-connect-redis-source/*"

    depends_on:
    - "kafka"
    - "redis"
    container_name: "kafka_redis_connect"

  ksql:
    image: confluentinc/cp-ksql-server:5.2.2
    ports:
    - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:19092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SERVICE_ID: "ksql_service_docker"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/"
    container_name: "ksql"

    depends_on:
    - "kafka"
    - "schema-registry"


  connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    ports:
    - "8084:8084"
    environment:
      PORT: "8084"
      PROXY: "true"
      CONNECT_URL: "http://connect:8083"
    container_name: "connect-ui"
    depends_on:
    - "connect"


  topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    ports:
    - "8085:8085"
    environment:
      PORT: "8085"
      PROXY: "true"
      KAFKA_REST_PROXY_URL: "http://rest-proxy:8082"
    container_name: "topics-ui"

    depends_on:
    - "rest-proxy"

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.5
    ports:
    - "8086:8086"
    environment:
      PORT: "8086"
      PROXY: "true"
      SCHEMAREGISTRY_URL: "http://schema-registry:8081/"
    container_name: "schema-registry-ui"

    depends_on:
    - "schema-registry"

  spark:
    image: docker.io/bitnami/spark:3-debian-10
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
    volumes:
      - ./:/home/workspace/
      - ./spark/jars:/opt/bitnami/spark/.ivy2
    container_name: "spark"


  spark-worker-1:
    image: docker.io/bitnami/spark:3-debian-10
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    container_name: "spark_worker"

    volumes:
      - ./:/home/workspace/
      - ./spark/jars:/opt/bitnami/spark/.ivy2           


 



